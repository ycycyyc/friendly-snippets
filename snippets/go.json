{
  "multiple imports": {
    "prefix": "import",
    "body": "import (\n\t\"${1:package}\"\n)",
    "description": "Snippet for a import block"
  },
  "single constant": {
    "prefix": "const",
    "body": "const ${1:name} = ${2:value}",
    "description": "Snippet for a constant"
  },
  "function declaration": {
    "prefix": "functype",
    "body": "func $1($2) $3 {\n\t$0\n}",
    "description": "Snippet for function declaration"
  },
  "goroutine anonymous function": {
    "prefix": "gofunc",
    "body": "go func($1) {\n\t$0\n}($2)",
    "description": "Snippet for anonymous goroutine declaration"
  },
  "table driven test": {
    "prefix": "tdt",
    "body": "func Test$1(t *testing.T) {\n\ttestCases := []struct {\n\t\tdesc\tstring\n\t\t$2\n\t}{\n\t\t{\n\t\t\tdesc: \"$3\",\n\t\t\t$4\n\t\t},\n\t}\n\tfor _, tC := range testCases {\n\t\tt.Run(tC.desc, func(t *testing.T) {\n\t\t\t$0\n\t\t})\n\t}\n}",
    "description": "Snippet for table driven test"
  },
  "method declaration": {
    "prefix": ["funcmethod"],
    "body": "func (${1:receiver} ${2:type}) ${3:method}(${4:para}) ${5:type} {\n\t$0\n}",
    "description": "Snippet for method declaration"
  },
  "sort implementation": {
    "prefix": "sort",
    "body": "type ${1:SortBy} []${2:Type}\n\nfunc (a $1) Len() int           { return len(a) }\nfunc (a $1) Swap(i, j int)      { a[i], a[j] = a[j], a[i] }\nfunc (a $1) Less(i, j int) bool { ${3:return a[i] < a[j]} }",
    "description": "Snippet for a custom sort.Sort interface implementation, for a given slice type."
  }
}
